{"version":3,"sources":["components/Form/Form.js","components/Todo/Todo.js","components/TodoList/TodoList.js","components/Filter/Filter.js","App.js","index.js"],"names":["Form","state","title","handleChange","event","value","target","setState","handleSubmit","preventDefault","props","addTodo","this","onSubmit","className","placeholder","onChange","React","Component","Todo","changeStatusTodo","deleteTodo","todo","id","completed","cx","type","checked","htmlFor","onClick","TodoList","PropTypes","string","bool","todos","map","key","Filter","handleFilterClick","filter","selected","name","FILTERS","App","trim","uniqeId","uuidv4","prevState","todoId","toggleAllTodos","clearAllCompleted","visibleTodos","length","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.909f64d5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Form extends React.Component {\n  state = {\n    title: '',\n  };\n\n  handleChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      title: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title } = this.state;\n\n    this.props.addTodo(title);\n\n    this.setState({\n      title: '',\n    });\n  };\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={this.handleChange}\n        />\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nexport const Todo = (\n  {\n    changeStatusTodo,\n    deleteTodo,\n    todo: { title, id, completed },\n  },\n) => (\n  <li\n    className={cx({ completed })}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        checked={completed}\n        onChange={() => changeStatusTodo(id)}\n        id={id}\n      />\n      <label\n        htmlFor=\"label\"\n      >\n        {title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => deleteTodo(id)}\n      />\n    </div>\n  </li>\n);\n\nexport const todoTypes = {\n  id: PropTypes.string,\n  completed: PropTypes.bool,\n  title: PropTypes.string,\n};\n\nTodo.propTypes = {\n  todo: PropTypes.shape(todoTypes).isRequired,\n  changeStatusTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo, todoTypes } from '../Todo/Todo';\n\nconst TodoList = ({\n  todos,\n  deleteTodo,\n  changeStatusTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        key={todo.id}\n        todo={todo}\n        deleteTodo={deleteTodo}\n        changeStatusTodo={changeStatusTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape(todoTypes).isRequired,\n  ).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeStatusTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nconst Filter = ({ handleFilterClick, filter }) => (\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        className={cx({ selected: filter === 'all' })}\n        name=\"all\"\n        onClick={handleFilterClick}\n      >\n        All\n      </button>\n    </li>\n    <li>\n      <button\n        type=\"button\"\n        className={cx({ selected: filter === 'active' })}\n        name=\"active\"\n        onClick={handleFilterClick}\n      >\n        Active\n      </button>\n    </li>\n    <li>\n      <button\n        type=\"button\"\n        className={cx({ selected: filter === 'completed' })}\n        name=\"completed\"\n        onClick={handleFilterClick}\n      >\n        Completed\n      </button>\n    </li>\n  </ul>\n);\n\nFilter.propTypes = {\n  handleFilterClick: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Form from './components/Form/Form';\nimport TodoList from './components/TodoList/TodoList';\nimport Filter from './components/Filter/Filter';\n\nconst FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filter: 'all',\n  };\n\n  addTodo = (title) => {\n    if (title.trim() === '') {\n      return;\n    }\n\n    const uniqeId = uuidv4();\n\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        {\n          id: uniqeId,\n          title,\n          completed: false,\n        },\n      ],\n    }));\n  };\n\n  changeStatusTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  toggleAllTodos = (event) => {\n    const { checked } = event.target;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n    }));\n  };\n\n  clearAllCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  };\n\n  handleFilterClick = (event) => {\n    const { name } = event.target;\n\n    this.setState({\n      filter: name,\n    });\n  };\n\n   visibleTodos = () => {\n     const { todos, filter } = this.state;\n\n     switch (filter) {\n       case FILTERS.active: return todos.filter(todo => !todo.completed);\n       case FILTERS.completed: return todos.filter(todo => todo.completed);\n       default: return todos;\n     }\n   };\n\n   render() {\n     const { todos, filter } = this.state;\n\n     return (\n       <section className=\"todoapp\">\n         <header className=\"header\">\n           <h1>todos</h1>\n           <Form\n             addTodo={this.addTodo}\n           />\n         </header>\n         {todos.length > 0 && (\n           <section className=\"main\">\n             <input\n               type=\"checkbox\"\n               id=\"toggle-all\"\n               className=\"toggle-all\"\n               onChange={this.toggleAllTodos}\n               checked={todos.every(todo => todo.completed)}\n             />\n             <label\n               htmlFor=\"toggle-all\"\n             >\n               Mark all as complete\n             </label>\n             <TodoList\n               todos={this.visibleTodos()}\n               deleteTodo={this.deleteTodo}\n               changeStatusTodo={this.changeStatusTodo}\n             />\n           </section>\n         )}\n         {todos.length > 0 && (\n           <footer className=\"footer\">\n             <span className=\"todo-count\">\n               {todos.filter(todo => !todo.completed).length}\n                items left\n             </span>\n             <Filter\n               handleFilterClick={this.handleFilterClick}\n               filter={filter}\n             />\n             <button\n               type=\"button\"\n               className=\"clear-completed\"\n               onClick={this.clearAllCompleted}\n             >\n              Clear completed\n             </button>\n           </footer>\n         )}\n       </section>\n     );\n   }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}